@inject IHttpClientFactory ClientFactory

<div>
    @json
</div>

@code{

    string uri = "http://192.168.2.101/get";
    string? json = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
         if(firstRender)
        {
            var periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(3));
            while (await periodicTimer.WaitForNextTickAsync())
            {
                json = await HttpRequest(uri);
                this.StateHasChanged();
            }
        }
    }
    private async Task<string?> HttpRequest(string uri)
    {
        var request = new HttpRequestMessage(HttpMethod.Get, uri);
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        string json = string.Empty;

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            using var streamReader = new StreamReader(responseStream);

            json = streamReader.ReadToEnd();
        }
        
        return json;
    }

}

    @* private async Task<string?> HttpRequest(string uri)
    {
        try	
        {
            HttpResponseMessage response = await client.GetAsync("uri");
            response.EnsureSuccessStatusCode();
            string responseBody = await response.Content.ReadAsStringAsync();

            Console.WriteLine(responseBody);
            return responseBody;
        }
        catch(HttpRequestException e)
        {
            Console.WriteLine("\nException Caught!");	
            Console.WriteLine("Message :{0} ",e.Message);
            return null;
        }
    } *@