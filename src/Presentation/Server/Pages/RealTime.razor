
@inject IHttpClientFactory ClientFactory

<h3>Observasi Saat Ini:</h3>
<div class="d-flex flex-row w-25">
    <table class="table table-sm table-dark">
        <thead>
            <tr>
            <th scope="col">Pot</th>
            <th scope="col">Suhu</th>
            <th scope="col">Kelembaban</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var observasi in RealTimeObservasi)
        {
            <tr>
                <th scope="row">@observasi.NomorPot</th>
                <td>@observasi.SuhuUdara</td>
                <td>@observasi.KelembabanTanah</td>%
            </tr>
        }
        </tbody>
    </table>
</div>

<br class="py-3">

Sejarah Pot 1: @SejarahObservasiPot1.Count

<div>
    <h3>Sejarah Observasi:</h3>
    <div class="d-flex flex-row">
        <div>
            <table class="table table-sm ">
                <thead>
                    <tr>
                    <th scope="col">Pot</th>
                    <th scope="col">Tanggal</th>
                    <th scope="col">Jam</th>
                    <th scope="col">Suhu</th>
                    <th scope="col">Kelembaban</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var observasi in SejarahObservasiPot1)
                {
                    <tr>
                        <th scope="row">@observasi.NomorPot</th>
                        <td>@observasi.Tanggal</td>
                        <td>@observasi.Jam</td>
                        <td>@observasi.SuhuUdara</td>
                        <td>@observasi.KelembabanTanah</td>%
                    </tr>
                }
                </tbody>
            </table>
        </div>
        <span class="px-3"></span>
        <div>
            pot 2
        </div>
    </div>
</div>

@code{

    string uri = "http://192.168.2.101/get";
    string? json = string.Empty;

    protected override void OnInitialized()
    {
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
         if(firstRender)
        {
            var periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(60));
            while (await periodicTimer.WaitForNextTickAsync())
            {
                SejarahObservasiPot2 = AppController.SejarahObservasi(pot: 2);
                SejarahObservasiPot1 = AppController.SejarahObservasi(pot: 1);

                json = await HttpRequest(uri);
                RealTimeObservasi = AppController.HasilObservasi(json!);

                this.StateHasChanged();
            }
        }
    }

    private async Task<string?> HttpRequest(string uri)
    {
        var request = new HttpRequestMessage(HttpMethod.Get, uri);
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        string json = string.Empty;

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            using var streamReader = new StreamReader(responseStream);

            json = streamReader.ReadToEnd();
        }
        
        return json;
    }

}
